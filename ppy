from flask import Flask, request, jsonify, redirect, render_template_string, Response, send_from_directory
import subprocess, os, json, threading, cv2, numpy as np, time, lgpio, psutil, shutil, requests, socket
import tflite_runtime.interpreter as tflite
from picamera2 import Picamera2
from datetime import datetime
import pandas as pd
from dash import Dash, dcc, html, Input, Output
import dash_bootstrap_components as dbc
import plotly.express as px
from flask_socketio import SocketIO
import firebase_admin
from firebase_admin import credentials, firestore, storage
import subprocess
import time
import threading
import zipfile
from flask import send_file
import getpass
from collections import deque
import re
import csv

print("ðŸ§  Running as user:", getpass.getuser())

print("[SERVER] Starting as user:", getpass.getuser())

# Initialize Firebase
if not firebase_admin._apps:
    cred = credentials.Certificate('/home/ada/de/smartaid-6c5c0-firebase-adminsdk-fbsvc-cee03b08da.json')
    firebase_admin.initialize_app(cred, {
        'databaseURL': 'https://smartaid-6c5c0-default-rtdb.firebaseio.com/',
        'storageBucket': 'smartaid-6c5c0.appspot.com'
    })

# Flask app setup
app = Flask(__name__, static_folder="/home/ada/de/app_server/web_app")
app.config["PROPAGATE_EXCEPTIONS"] = True
app.config["DEBUG"] = True
socketio = SocketIO(app, cors_allowed_origins="*")

db = firestore.client()

frame_lock = threading.Lock()

# Global config
health_status = "OK"
detection_active = True
config_data = {"indoor_mode": False}
LABEL_PATH = "/home/ada/de/coco_labels.txt"
MODEL_PATH = "/home/ada/de/mobilenet_v2.tflite"
CONFIG_FILE = "/home/ada/de/detection/config.json"
voice_alert_enabled = True
normalSize = (2028, 1520)
lowresSize = (300, 300)
latest_frame = None
indoor_mode = False
logging_paused = False
ultrasonic_voice_enabled = True

# --- Static file and UI routes ---
@app.route('/')
def serve_index():
    return redirect('/control_panel')

@app.route('/control_panel')
def serve_control_panel():
    return send_from_directory(app.static_folder, 'control_panel.html')

@app.route('/<path:filename>')
def serve_static(filename):
    return send_from_directory(app.static_folder, filename)

# Unified config endpoint
@app.route("/get_config", methods=["GET"])
def get_config():
    mode_labels = config_data.get("filter_classes", {})
    is_custom = isinstance(mode_labels, list) or (
        isinstance(mode_labels, dict) and "indoor" in mode_labels and "outdoor" in mode_labels and
        config_data.get("indoor_mode", False) is False and
        config_data.get("filter_classes").get("indoor") != config_data.get("filter_classes")
    )

    return jsonify({
        **config_data,
        "custom_mode": is_custom
    })

@app.route("/status")
def get_status():
    battery = psutil.sensors_battery()
    return jsonify({
        "battery": battery.percent if battery else -1,
        "health": health_status,
        "detection_active": detection_active,
        "quiet_mode_enabled": config_data.get("quiet_mode_enabled", False),
        "mode": "indoor" if config_data.get("indoor_mode") else "outdoor"
    })

# --- Dash Setup ---
dash_app = Dash(__name__, server=app, url_base_pathname='/analytics/', external_stylesheets=[dbc.themes.DARKLY])
dash_app.title = "Smart Hat Analytics"

# Dashboard Layout
dash_app.layout = dbc.Container(fluid=True, children=[
    html.H1("Smart Hat Analytics Dashboard", className="text-center my-4"),

    # Interval triggers
    dcc.Interval(id='fast-refresh', interval=10*1000, n_intervals=0),
    dcc.Interval(id='slow-refresh', interval=30*1000, n_intervals=0),

    # Styled Summary Stats Row
    dbc.Row([
        dbc.Col(
            dbc.Card([
                dbc.CardBody([
                    html.H4("ðŸ”‹ Battery", className="card-title"),
                    html.H2(id='battery-summary', className="card-text")
                ])
            ], color="dark", inverse=True, className="shadow-sm text-center"), width=3
        ),
        dbc.Col(
            dbc.Card([
                dbc.CardBody([
                    html.H4("ðŸŒ¡ Temp", className="card-title"),
                    html.H2(id='temp-summary', className="card-text")
                ])
            ], color="dark", inverse=True, className="shadow-sm text-center"), width=3
        ),
        dbc.Col(
            dbc.Card([
                dbc.CardBody([
                    html.H4("ðŸ§  CPU", className="card-title"),
                    html.H2(id='cpu-summary', className="card-text")
                ])
            ], color="dark", inverse=True, className="shadow-sm text-center"), width=3
        ),
        dbc.Col(
            dbc.Card([
                dbc.CardBody([
                    html.H4("ðŸš¶ Distance", className="card-title"),
                    html.H2(id='distance-summary', className="card-text")
                ])
            ], color="dark", inverse=True, className="shadow-sm text-center"), width=3
        )
    ], className="mb-4"),

    # Core Graphs
    dbc.Row([
        dbc.Col(dcc.Graph(id='battery-graph'), width=6),
        dbc.Col(dcc.Graph(id='detection-log-graph'), width=6),
    ]),
    dbc.Row([
        dbc.Col(dcc.Graph(id='system-health-graph'), width=12)
    ]),

    # Debug Graphs
    html.Hr(),
    html.H4("Advanced Debug Metrics", className="mt-4 text-center"),
    dbc.Row([
        dbc.Col(dcc.Graph(id='fps-graph'), width=6),
        dbc.Col(dcc.Graph(id='latency-graph'), width=6),
    ]),
    dbc.Row([
        dbc.Col(dcc.Graph(id='precision-graph'), width=6),
        dbc.Col(dcc.Graph(id='accuracy-graph'), width=6),
    ])
])

# Helper functions
def clean_and_downsample(df, value_cols=None, interval='1min'):
    if df.empty or 'timestamp' not in df.columns:
        return df
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms', errors='coerce')
    df = df.dropna(subset=['timestamp'])
    if value_cols:
        return df.groupby(pd.Grouper(key='timestamp', freq=interval))[value_cols].mean(numeric_only=True).reset_index()
    else:
        return df.groupby(pd.Grouper(key='timestamp', freq=interval)).mean(numeric_only=True).reset_index()

def fetch_motion_data():
    motion_ref = db.collection('motion_logs')
    docs = [doc.to_dict() for doc in motion_ref.stream()]
    return pd.DataFrame(docs) if docs else pd.DataFrame()

def fetch_battery_data():
    battery_ref = db.collection('battery_logs')
    docs = [doc.to_dict() for doc in battery_ref.stream()]
    print("Battery logs:", docs)
    return pd.DataFrame(docs) if docs else pd.DataFrame()

def fetch_ultrasonic_data():
    ultrasonic_ref = db.collection('ultrasonic_logs')
    docs = [doc.to_dict() for doc in ultrasonic_ref.stream()]
    print("Ultrasonic logs:", docs)
    rows = []
    for doc in docs:
        if 'timestamp' in doc and 'readings' in doc:
            row = {'timestamp': doc['timestamp']}
            row.update(doc['readings'])
            rows.append(row)
    return pd.DataFrame(rows) if rows else pd.DataFrame()

def fetch_system_health_data():
    system_ref = db.collection('system_health_logs')
    docs = [doc.to_dict() for doc in system_ref.stream()]
    print("System health logs:", docs)
    return pd.DataFrame(docs) if docs else pd.DataFrame()

def fetch_detection_data(full=False):
    detection_ref = db.collection('detection_logs')
    docs = [doc.to_dict() for doc in detection_ref.stream()]
    if not docs:
        return pd.DataFrame()
    df = pd.DataFrame(docs)
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms', errors='coerce')
    df = df.dropna(subset=['timestamp'])
    df['detection_count'] = 1
    if full:
        return df
    return df.groupby(pd.Grouper(key='timestamp', freq='1min')).sum(numeric_only=True).reset_index()

# Graph callbacks
def generate_graph_callback(fetch_func, graph_id, y_columns=None, title="", kind="line", interval_id='fast-refresh'):
    @dash_app.callback(Output(graph_id, 'figure'), Input(interval_id, 'n_intervals'))
    def update_graph(n):
        df = fetch_func()
        df = clean_and_downsample(df, value_cols=y_columns)
        if df.empty:
            return px.line(title=f"{title} (No Data)")
        if kind == "line":
            fig = px.line(df, x='timestamp', y=y_columns, title=title)
        elif kind == "bar":
            fig = px.bar(df, x='timestamp', y=y_columns, title=title)
        elif kind == "step":
            fig = px.line(df, x='timestamp', y=y_columns, title=title)
        else:
            fig = px.line(title=f"{title} (Invalid Type)")
        fig.update_layout(height=300, margin=dict(l=40, r=40, t=40, b=40), xaxis_title="Time")
        return fig
    return update_graph
    
# Dash callbacks
@dash_app.callback(Output("battery-summary", "children"), Input("fast-refresh", "n_intervals"))
def update_battery_summary(n):
    df = fetch_battery_data()
    if df.empty:
        return "ðŸ”‹ Battery: N/A"
    latest = df.sort_values("timestamp").iloc[-1]
    return f"ðŸ”‹ Battery: {round(latest.get('battery_percentage', 0))}%"

@dash_app.callback(Output("temp-summary", "children"), Input("fast-refresh", "n_intervals"))
def update_temp_summary(n):
    df = fetch_system_health_data()
    if df.empty:
        return "ðŸŒ¡ Temp: N/A"
    latest = df.sort_values("timestamp").iloc[-1]
    return f"ðŸŒ¡ Temp: {round(latest.get('temperature', 0))}Â°C"

@dash_app.callback(Output("cpu-summary", "children"), Input("fast-refresh", "n_intervals"))
def update_cpu_summary(n):
    df = fetch_system_health_data()
    if df.empty:
        return "ðŸ§  CPU: N/A"
    latest = df.sort_values("timestamp").iloc[-1]
    return f"ðŸ§  CPU: {round(latest.get('cpu', 0))}%"

@dash_app.callback(Output("distance-summary", "children"), Input("fast-refresh", "n_intervals"))
def update_distance_summary(n):
    try:
        docs = [doc.to_dict() for doc in db.collection("location_logs").stream()]
        df = pd.DataFrame(docs)
        if df.empty or 'distance' not in df.columns:
            return "ðŸš¶ Distance: N/A"
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms', errors='coerce')
        today = datetime.now().strftime('%Y-%m-%d')
        df['date'] = df['timestamp'].dt.strftime('%Y-%m-%d')
        total = df[df['date'] == today]['distance'].sum()
        return f"ðŸš¶ Distance: {round(total)} meters"
    except Exception as e:
        print("Distance summary error:", e)
        return "ðŸš¶ Distance: Error"

# Register graphs
generate_graph_callback(fetch_battery_data, 'battery-graph', ['battery_percentage'], "Battery Over Time", interval_id='slow-refresh')
generate_graph_callback(fetch_ultrasonic_data, 'ultrasonic-graph', None, "Ultrasonic Sensor Data", interval_id='fast-refresh')
generate_graph_callback(fetch_system_health_data, 'system-health-graph', ['cpu', 'memory', 'temperature'], "System Health Metrics", interval_id='fast-refresh')
generate_graph_callback(fetch_motion_data, 'motion-status-graph', ['motion_value'], "Motion Status Over Time", kind="step", interval_id='fast-refresh')
generate_graph_callback(lambda: fetch_detection_data(full=False), 'detection-log-graph', ['detection_count'], "Detections Over Time", kind="bar", interval_id='slow-refresh')
generate_graph_callback(lambda: fetch_detection_data(full=True), 'fps-graph', ['frame_id'], "FPS Over Time", interval_id='fast-refresh')
generate_graph_callback(lambda: fetch_detection_data(full=True), 'latency-graph', ['duration_ms'], "Latency (ms) Over Time", interval_id='slow-refresh')
generate_graph_callback(lambda: fetch_detection_data(full=True), 'precision-graph', ['true_positive', 'false_positive'], "Precision Over Time", interval_id='slow-refresh')
generate_graph_callback(lambda: fetch_detection_data(full=True), 'accuracy-graph', ['true_positive', 'false_positive', 'false_negative'], "Accuracy Over Time", interval_id='slow-refresh')

# Log download functions
def convert_logs_to_csv(logs):
    filename = "/tmp/logs.csv"
    with open(filename, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=logs[0].keys())
        writer.writeheader()
        writer.writerows(logs)
    return filename

@app.route('/download_logs', methods=['GET'])
def download_all_logs():
    try:
        collections = [
            'battery_logs',
            'ultrasonic_logs',
            'motion_logs',
            'detection_logs',
            'location_logs',
            'system_health_logs',
            'video_logs'
        ]

        zip_filename = "/tmp/all_logs.zip"
        with zipfile.ZipFile(zip_filename, 'w') as zipf:
            for col in collections:
                docs = [doc.to_dict() for doc in db.collection(col).stream()]
                if not docs:
                    continue
                df = pd.DataFrame(docs)
                csv_path = f"/tmp/{col}.csv"
                df.to_csv(csv_path, index=False)
                zipf.write(csv_path, arcname=f"{col}.csv")

        return send_file(zip_filename, as_attachment=True, download_name="all_logs.zip")

    except Exception as e:
        print("[ERROR] Failed to download all logs:", e)
        return f"Error creating ZIP: {e}", 500

# Motion status route
@app.route("/motion-status")
def get_motion_status():
    return jsonify({
        "motion_active": motion_active
    })

# Voice command to simulate motion
@app.route("/voice_command", methods=["POST"])
def voice_command():
    command = request.json.get("command", "").lower()
    if "i am walking" in command or "start walking" in command:
        requests.post("http://localhost:5000/motion", json={"moving": True})
        return jsonify({"status": "triggered", "motion": True})
    elif "i stopped" in command or "stop walking" in command:
        requests.post("http://localhost:5000/motion", json={"moving": False})
        return jsonify({"status": "triggered", "motion": False})
    return jsonify({"status": "ignored"})

# Default config
default_config = {
    "filter_classes": {
        "indoor": [
            "person", "chair", "couch", "tv", "laptop", "remote", "cell phone",
            "microwave", "refrigerator", "bed", "dining table", "book", "toaster", "sink"
        ],
        "outdoor": [
            "person", "car", "bus", "bicycle", "motorcycle", "truck", "traffic light", "stop sign",
            "dog", "cat", "bench", "parking meter", "train", "sheep", "cow", "horse"
        ]
    },
    "logging": True,
    "quiet_mode_enabled": False,
    "indoor_mode": False,
    "ultrasonic_thresholds": {
        "Left Front": 70,
        "Left Middle": 70,
        "Left Rear": 70,
        "Right Front": 70,
        "Right Middle": 70,
        "Right Rear": 70
    }
}

# Ultrasonic sensor configuration
SENSORS = {
    "Left Front":  {"trigger": 4,  "echo": 17},
    "Left Middle": {"trigger": 27, "echo": 22},
    "Left Rear":   {"trigger": 23, "echo": 24},
    "Right Front": {"trigger": 5,  "echo": 6},
    "Right Middle": {"trigger": 12, "echo": 13},
    "Right Rear":   {"trigger": 19, "echo": 26}
}

CHIP = 4
ultrasonic_readings = {}
motion_active = False
last_ultra_speak_time = {}

# Utility functions
def read_label_file(path):
    with open(path, 'r') as f:
        return {int(line.split()[0]): line.strip().split(maxsplit=1)[1] for line in f}

def push_message_to_clients(message):
    socketio.emit('speak', {'message': message})

def measure_distance(h, trig, echo, timeout=0.02):
    lgpio.gpio_write(h, trig, 1)
    time.sleep(0.00001)
    lgpio.gpio_write(h, trig, 0)
    start = time.time()
    timeout_start = time.time()
    while lgpio.gpio_read(h, echo) == 0:
        start = time.time()
        if time.time() - timeout_start > timeout:
            return "No Echo"
    timeout_start = time.time()
    while lgpio.gpio_read(h, echo) == 1:
        stop = time.time()
        if time.time() - timeout_start > timeout:
            return "Echo Timeout"
    elapsed = stop - start
    distance = (elapsed * 34300) / 2
    return round(distance, 2) if 2 < distance < 400 else "Out of Range"

ultra_history = {name: deque(maxlen=3) for name in SENSORS}
detection_timers = {}
baseline_distances = {}

def ultrasonic_loop():
    global logging_paused, health_status, ultrasonic_readings
    h = None
    try:
        h = lgpio.gpiochip_open(4)
        for s in SENSORS.values():
            try:
                lgpio.gpio_free(h, s["trigger"])
                lgpio.gpio_free(h, s["echo"])
            except:
                pass
            lgpio.gpio_claim_output(h, s["trigger"])
            lgpio.gpio_claim_input(h, s["echo"])

        while True:
            if logging_paused:
                print("[ULTRASONIC] Skipping log due to paused flag")
                time.sleep(1)
                continue

            now = time.time()
            failed = []
            readings = {}
            successful_readings = 0

            for name, pin in SENSORS.items():
                dist = measure_distance(h, pin["trigger"], pin["echo"])
                threshold = config_data.get("ultrasonic_thresholds", {}).get(name, 100)

                if isinstance(dist, (int, float)):
                    ultra_history[name].append(dist)

                    if len(ultra_history[name]) == 3:
                        diffs = [abs(ultra_history[name][i] - ultra_history[name][i - 1]) for i in range(1, 3)]
                        if max(diffs) < 5:
                            smoothed = sum(ultra_history[name]) / 3
                            readings[name] = round(smoothed, 2)
                            successful_readings += 1

                            if name not in baseline_distances:
                                baseline_distances[name] = smoothed
                            else:
                                baseline_distances[name] = 0.9 * baseline_distances[name] + 0.1 * smoothed
                        else:
                            readings[name] = None
                            detection_timers.pop(name, None)
                else:
                    readings[name] = None
                    failed.append(name)
                    detection_timers.pop(name, None)

            left_close = any(name.startswith("Left") and dist and dist < 80 for name, dist in readings.items())
            right_close = any(name.startswith("Right") and dist and dist < 80 for name, dist in readings.items())

            if ultrasonic_voice_enabled and voice_alert_enabled and not config_data.get("indoor_mode", False):
                for name, dist in readings.items():
                    if dist and dist < threshold:
                        baseline = baseline_distances.get(name, 100)
                        side = "left" if "Left" in name else "right"
                        if left_close and right_close:
                            continue
                        if dist < baseline * 0.6:
                            if name not in detection_timers:
                                detection_timers[name] = now
                            elif now - detection_timers[name] > 2 and now - last_ultra_speak_time.get(name, 0) > 4:
                                push_message_to_clients(f"Obstacle on {side} at {int(dist)} cm")
                                last_ultra_speak_time[name] = now
                        else:
                            detection_timers.pop(name, None)
                    else:
                        detection_timers.pop(name, None)

            if successful_readings == 0:
                print("[SKIP] All ultrasonic sensors failed â€” not logging this cycle.")
                health_status = "All sensors unresponsive"
                if ultrasonic_voice_enabled and voice_alert_enabled and not config_data.get("indoor_mode", False) and now - last_ultra_speak_time.get("all_failed", 0) > 10:
                    push_message_to_clients("All ultrasonic sensors are offline. Please check connections.")
                    last_ultra_speak_time["all_failed"] = now
                time.sleep(1)
                continue

            ultrasonic_readings = readings
            db.collection('ultrasonic_logs').add({
                'timestamp': int(time.time() * 1000),
                'readings': readings,
                'faults': failed
            })
            health_status = "OK" if not failed else f"Sensor fault: {', '.join(failed)}"
            time.sleep(1)
    except Exception as e:
        print("[Ultrasonic Error]", e)
        health_status = "Ultrasonic error"
    finally:
        if h is not None:
            try:
                lgpio.gpiochip_close(h)
            except Exception as e:
                print("[ULTRASONIC] Failed to close gpiochip:", e)

def battery_monitor():
    warned = False
    while True:
        battery = psutil.sensors_battery()
        percent = battery.percent if battery else 100
        db.collection('battery_logs').add({
            'timestamp': int(time.time()* 1000),
            'readable_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'battery_percentage': percent
        })
        if percent <= 20 and not warned:
            push_message_to_clients("Battery low. Please charge Smart Hat.")
            warned = True
        if percent > 30:
            warned = False
        time.sleep(60)

def system_metrics_monitor():
    while True:
        cpu_percent = psutil.cpu_percent()
        mem_percent = psutil.virtual_memory().percent
        temp = psutil.sensors_temperatures()
        temperature = temp.get("cpu", None)[0].current if temp and temp.get("cpu") else None
        db.collection('system_health_logs').add({
            'timestamp': int(time.time() * 1000),
            'readable_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'cpu': cpu_percent,
            'memory': mem_percent,
            'temperature': temperature
        })
        time.sleep(5)

def load_config():
    global config_data
    try:
        with open(CONFIG_FILE, "r") as f:
            config = json.load(f)
            config_data = {**default_config, **config}
            print("[CONFIG] Loaded config:", config_data)
    except Exception as e:
        print(f"[CONFIG] Error loading config, using defaults: {e}")
        config_data = default_config
        save_config()

def save_config():
    try:
        with open(CONFIG_FILE, "w") as f:
            json.dump(config_data, f, indent=4)
            print("[CONFIG] Saved config:", config_data)
    except Exception as e:
        print(f"[CONFIG] Error saving config: {e}")

@app.route("/update_config", methods=["POST"])
def update_config():
    global config_data
    try:
        new_config = request.json
        print("[CONFIG] Received update:", new_config)
        config_data = {**default_config, **new_config}
        save_config()
        return jsonify({"status": "success", "config": config_data})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/clear_logs", methods=["POST"])
def clear_logs():
    try:
        collections = [
            'battery_logs',
            'ultrasonic_logs',
            'motion_logs',
            'detection_logs',
            'location_logs',
            'system_health_logs',
            'video_logs'
        ]
        for collection in collections:
            docs = db.collection(collection).stream()
            for doc in docs:
                doc.reference.delete()
        return jsonify({"status": "success"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/restart", methods=["POST"])
def restart_system():
    try:
        push_message_to_clients("System is restarting...")
        subprocess.run(["sudo", "reboot"], check=True)
        return jsonify({"status": "restarting"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/motion", methods=["POST"])
def set_motion():
    global motion_active
    moving = request.json.get("moving", False)
    motion_active = moving
    db.collection('motion_logs').add({
        'timestamp': int(time.time() * 1000),
        'readable_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'motion_value': moving
    })
    return jsonify({"status": "success", "motion_active": motion_active})

def detect_objects(interpreter, frame, threshold=0.5):
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
    _, height, width, _ = input_details[0]['shape']
    resized_frame = cv2.resize(frame, (width, height))
    input_data = np.expand_dims(resized_frame, axis=0)
    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke()
    detections = interpreter.get_tensor(output_details[0]['index'])
    return detections[0]

def draw_bounding_boxes(frame, detections, labels, threshold=0.5):
    height, width, _ = frame.shape
    for detection in detections:
        if detection[2] > threshold:
            class_id = int(detection[1])
            label = labels.get(class_id, "Unknown")
            x1 = int(detection[3] * width)
            y1 = int(detection[4] * height)
            x2 = int(detection[5] * width)
            y2 = int(detection[6] * height)
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
    return frame

def detection_loop():
    global latest_frame, detection_active, logging_paused, health_status
    load_config()
    labels = read_label_file(LABEL_PATH)
    interpreter = tflite.Interpreter(model_path=MODEL_PATH)
    interpreter.allocate_tensors()
    try:
        camera = Picamera2()
        camera.preview_configuration.main.size = normalSize
        camera.preview_configuration.main.format = "RGB888"
        camera.start()
        print("[CAMERA] Camera started")
    except Exception as e:
        print(f"[CAMERA] Error starting camera: {e}")
        health_status = "Camera error"
        return

    frame_times = deque(maxlen=30)
    detection_times = deque(maxlen=30)
    start_time = time.time()
    frame_count = 0
    log_count = 0
    true_positives = 0
    false_positives = 0
    false_negatives = 0
    last_logged_time = time.time()
    target_fps = 10
    while True:
        if not detection_active:
            time.sleep(1)
            continue
        if logging_paused:
            time.sleep(1)
            continue
        try:
            frame = camera.capture_array()
            if frame is None:
                print("[DETECTION] Captured frame is None")
                continue
            frame_start_time = time.time()
            frame_count += 1
            latest_frame = frame.copy()
            if frame_count % 3 != 0:
                continue
            det_start_time = time.time()
            detections = detect_objects(interpreter, frame)
            det_end_time = time.time()
            detection_times.append(det_end_time - det_start_time)
            filtered_detections = []
            expected_classes = config_data.get("filter_classes", {}).get("indoor" if config_data.get("indoor_mode") else "outdoor", [])
            if config_data.get("custom_mode"):
                expected_classes = config_data.get("filter_classes", {}).get("indoor" if config_data.get("indoor_mode") else "outdoor")
            for detection in detections:
                class_id = int(detection[1])
                label = labels.get(class_id, "Unknown")
                if config_data.get("custom_mode"):
                    if label in expected_classes:
                        filtered_detections.append(detection)
                elif label in expected_classes:
                    filtered_detections.append(detection)
                if label in expected_classes and detection[2] > 0.5:
                    true_positives += 1
                elif label not in expected_classes and detection[2] > 0.5:
                    false_positives += 1
                elif label in expected_classes and detection[2] <= 0.5:
                    false_negatives += 1
            frame = draw_bounding_boxes(frame, filtered_detections, labels)
            frame_end_time = time.time()
            frame_times.append(frame_end_time - frame_start_time)
            fps = len(frame_times) / (frame_end_time - frame_times[0]) if frame_times else 0
            latency = sum(detection_times) / len(detection_times) if detection_times else 0
            precision = true_positives / (true_positives + false_positives) if (true_positives + false_positives) > 0 else 0
            accuracy = true_positives / (true_positives + false_positives + false_negatives) if (true_positives + false_positives + false_negatives) > 0 else 0
            if frame_end_time - start_time >= 1:
                print(f"[DETECTION] FPS: {fps:.2f}, Latency: {latency * 1000:.2f} ms")
                start_time = frame_end_time
            if time.time() - last_logged_time >= 5:
                db.collection('detection_logs').add({
                    'timestamp': int(time.time() * 1000),
                    'readable_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'frame_id': frame_count,
                    'fps': fps,
                    'duration_ms': latency * 1000,
                    'true_positive': true_positives,
                    'false_positive': false_positives,
                    'false_negative': false_negatives
                })
                log_count += 1
                last_logged_time = time.time()
                true_positives = 0
                false_positives = 0
                false_negatives = 0
            _, jpeg = cv2.imencode('.jpg', frame)
            with frame_lock:
                latest_frame = jpeg.tobytes()
            time_to_sleep = (1 / target_fps) - (time.time() - frame_start_time)
            if time_to_sleep > 0:
                time.sleep(time_to_sleep)
        except Exception as e:
            print(f"[DETECTION] Error in detection loop: {e}")
            health_status = "Detection error"
            try:
                camera.close()
            except:
                pass
            time.sleep(5)
            try:
                camera = Picamera2()
                camera.preview_configuration.main.size = normalSize
                camera.preview_configuration.main.format = "RGB888"
                camera.start()
                print("[CAMERA] Camera restarted")
                health_status = "OK"
            except Exception as e:
                print(f"[CAMERA] Error restarting camera: {e}")
                health_status = "Camera error"
                return

@app.route('/video_feed')
def video_feed():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

def generate_frames():
    global latest_frame
    while True:
        with frame_lock:
            if latest_frame is not None:
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + latest_frame + b'\r\n')
            else:
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + b'\r\n')
        time.sleep(0.1)

def start_flask():
    print("[FLASK] Starting Flask app...")
    socketio.run(app, host="0.0.0.0", port=5000, debug=False, use_reloader=False, allow_unsafe_werkzeug=True)

def start_ngrok():
    try:
        time.sleep(5)
        print("[NGROK] Launching tunnel to https://smartaid.ngrok.io ...")
        process = subprocess.Popen([
            "ngrok", "http", "--domain=smartaid.ngrok.io", "5000"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        time.sleep(5)
        print("[NGROK] Tunnel started. Check dashboard or browser: https://smartaid.ngrok.io")
        return process
    except Exception as e:
        print(f"[NGROK] Failed to start: {e}")
        return None

if __name__ == "__main__":
    try:
        flask_thread = threading.Thread(target=start_flask, daemon=True)
        flask_thread.start()

        ngrok_proc = start_ngrok()

        threading.Thread(target=ultrasonic_loop, daemon=True).start()
        threading.Thread(target=battery_monitor, daemon=True).start()
        threading.Thread(target=detection_loop, daemon=True).start()
        threading.Thread(target=system_metrics_monitor, daemon=True).start()

        time.sleep(3)
        push_message_to_clients("Smart Hat system online and ready.")

        while True:
            time.sleep(10)

    except KeyboardInterrupt:
        print("\n[MAIN] Shutting down...")
        if ngrok_proc:
            ngrok_proc.terminate()
            ngrok_proc.wait()
        print("[MAIN] Shutdown complete.")
